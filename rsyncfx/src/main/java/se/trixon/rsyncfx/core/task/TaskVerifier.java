/* 
 * Copyright 2023 Patrik Karlström <patrik@trixon.se>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package se.trixon.rsyncfx.core.task;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import se.trixon.almond.util.Dict;
//import org.openide.DialogDisplayer;
//import org.openide.NotifyDescriptor;

/**
 *
 * @author Patrik Karlström
 */
public class TaskVerifier extends javax.swing.JPanel {

    /**
     * Creates new form TaskVerifier
     */
    public TaskVerifier() {
        initComponents();
    }

    public void verify(final Task taskBuilder) {
        JButton copyButton = new JButton(Dict.COPY.toString());
        JButton exportButton = new JButton(Dict.EXPORT.toString());
        JButton okButton = new JButton(Dict.OK.toString());

        copyButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                StringSelection stringSelection = new StringSelection(taskBuilder.getCommandAsString());
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(stringSelection, null);
            }
        });

        exportButton.setEnabled(false);

        StringBuilder builder = new StringBuilder("<html>");
        builder.append(String.format("<strong>%s</strong><br />", "status..."));

        builder.append(String.format("%s:<br />%s", "Command", taskBuilder.getCommandAsString()));
        builder.append("<br />");
        builder.append("</html>");

//        NotifyDescriptor notifyDescriptor = new NotifyDescriptor(
//                builder.toString(),
//                Dict.VERIFY.toString(),
//                NotifyDescriptor.DEFAULT_OPTION,
//                NotifyDescriptor.INFORMATION_MESSAGE,
//                new JButton[]{okButton},
//                null);
//
//        notifyDescriptor.setAdditionalOptions(new JButton[]{copyButton, exportButton});
//        Object returnObject = DialogDisplayer.getDefault().notify(notifyDescriptor);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
